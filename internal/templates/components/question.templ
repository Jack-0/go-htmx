package components

import (
	"local/htmx-tt/internal/templates/pages"
	"local/htmx-tt/internal/domain"
	"strconv"
)

templ QuestionInput(value string) {
	<div class="number-input-div">
		<input
			autofocus
			type="number"
			id="number-input"
			class="numberInput"
			name="number-input"
			hx-post="/handle-keystroke"
			hx-trigger="keyup"
			hx-target="#number-input"
			value={ value }
		/>
	</div>
	<style type="text/css">
		/* hide number arrow keys */
		input::-webkit-outer-spin-button,
		input::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
		input[type=number] {
		  -moz-appearance: textfield;
		  color: gray;
		}
		.number-input-div{
			display: flex;
			width: 400px;
			margin-left: auto;
			margin-right: auto; 
		}

		.numberInput {
			width: 100%;
			text-align: center;
			outline: none;
			font-family: 'ComicMono', Fallback, sans-serif;
			font-size: 88px;
			color: #333333;
			align-items: center;
			justify-content: center;
			border: 0.2rem solid #ced4da;
			box-shadow: 0 4px #ced4da;
			border-radius: 0.5rem;
			padding-top: 0.7rem;
		}

		@media (max-width: 1023px) {
			.number-input-div{
				width: 100%;
			}
		}
	</style>
}

templ QuestionText(question domain.TTCurrentQuestion) {
	<p
		class="question-text jackInTheBox"
		id="question-text"
		hx-trigger="load"
		hx-target="#number-input"
		hx-swap="outerHTML"
		hx-post="/reset-number-input"
	>
		{ strconv.Itoa(int(question.ValueA)) } x { strconv.Itoa(int(question.ValueB)) }
	</p>
	<style type="text/css">
		.question-text {
			color: #555;
			font-size: 6rem;
			text-align: center;
			margin-bottom: 2rem;
			margin-top: 2rem;
		}

		@keyframes jackInTheBox {
			from {
				opacity: 0;
				transform: scale(0.1) rotate(30deg);
				transform-origin: center bottom;
			}
			50% {
				transform: rotate(-10deg);
			}
			70% {
				transform: rotate(3deg);
			}
			to {
				opacity: 1;
				transform: scale(1);
			}
		}
		.jackInTheBox {
			animation-name: jackInTheBox;
		    animation-duration: 0.6s;
		}
	</style>
}

// todo... on focus loss refocus input
templ Question(question domain.TTCurrentQuestion) {
	<div id="question-div" class="question">
		@QuestionText(question)
		<form class="question-form">
			@QuestionInput("")
			<button
				class="cool-btn submit submit-text"
				type="submit"
				hx-post="/answer"
				hx-trigger="click"
				hx-target="#question-text"
				hx-swap="outerHTML"
				id="answerBtn"
			>Submit</button>
			<div class="buttons">
				<div class="number-grid">
					for i:=9; i>-1; i-- {
						<button
							class="cool-btn cool-btn-text"
							type="button"
							hx-target="#number-input"
							hx-post={ "/handle-number-button/" + strconv.Itoa(i) }
							hx-swap="outerHTML"
						>
							<p>
								{ strconv.Itoa(i) }
							</p>
						</button>
					}
					<button
						class="cool-btn cool-btn-text"
						type="button"
						hx-target="#number-input"
						hx-post="/handle-number-button/del"
						hx-swap="outerHTML"
					>
						<p>
							DEL
						</p>
					</button>
				</div>
			</div>
		</form>
	</div>
	<style type="text/css">
		.buttons {
			display: flex;
			align-items: center;
			justify-content: center;
			margin-left: auto;
			margin-right: auto; 
		}

		.question {
			align-items: center; 
			width: 100%; 
			margin-left: auto;
			margin-right: auto; 
			color: #333333;
		}

		.question-form {
			align-self: center; 
		}
		
		.number-grid {
			width: 400px;
			display: grid;
			grid-template-columns: repeat(3, 1fr);
			grid-gap: 13px;
			align-items: center;
			justify-content: center;
		}

		.cool-btn-text {
			color: #555;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 2px;
			font-family: 'ComicMono', Fallback, sans-serif;
		}

		.cool-btn:nth-last-child(1) {
			grid-column: span 2;
		}

		.cool-btn {
			width: 100%;
			height: 100%;
			display: inline-flex;
			align-items: center;
			font-size: 2rem;
			background-color: #f1f3f5;
			border-radius: 0.5em;
			border: 0.1em solid #ced4da;
			box-shadow: 0 4px #ced4da;
			transition: all 0.1s;
			user-select: none;
			margin-bottom: auto;
			margin-right: auto;
		}
		.cool-btn:focus,
		.cool-btn:hover {
			background-color: #e9ecef;
			outline: 2px #1971c2;
		}
		.cool-btn:active {
			transform: translateY(4px);
			box-shadow: none;
		}

		.submit {
			margin-top: 20px;
			margin-bottom: 20px;
			width: 400px;
			margin-left:auto;
			margin-right:auto;
			background-color: #ce83ff;
			border: 0.1em solid #a568cd;
			box-shadow: 0 4px #a568cd;
		}
		.submit:focus,
		.submit:hover {
			background-color: #ca79ff;
			outline: 2px #a568cd;
		}
		.submit-text {
			color: rgba(0,0,0,0.5);
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 11px;
			font-family: 'ComicMono', Fallback, sans-serif;
		}

		@media (max-width: 1023px) {
			.number-grid {
				width: 100%;
			}
			.submit {
				width: 100%;
			}
			.cool-btn {
				padding: 3rem;
			}
		}
	</style>
}

templ QuestionView(question domain.TTCurrentQuestion) {
	@Pages.Page("Question") {
		@Question(question)
	}
}
